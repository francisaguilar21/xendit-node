/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This file is auto generated by Xendit.
 * Do not edit the class manually.
 * Improvements? Share your ideas at https://github.com/xendit/xendit-node
 */

import { exists, mapValues } from '../../runtime';
import type { ChannelProperties } from './ChannelProperties';
import {
    ChannelPropertiesFromJSON,
    ChannelPropertiesFromJSONTyped,
    ChannelPropertiesToJSON,
} from './ChannelProperties';
import type { CustomerObject } from './CustomerObject';
import {
    CustomerObjectFromJSON,
    CustomerObjectFromJSONTyped,
    CustomerObjectToJSON,
} from './CustomerObject';
import type { InvoiceFee } from './InvoiceFee';
import {
    InvoiceFeeFromJSON,
    InvoiceFeeFromJSONTyped,
    InvoiceFeeToJSON,
} from './InvoiceFee';
import type { InvoiceItem } from './InvoiceItem';
import {
    InvoiceItemFromJSON,
    InvoiceItemFromJSONTyped,
    InvoiceItemToJSON,
} from './InvoiceItem';
import type { NotificationPreference } from './NotificationPreference';
import {
    NotificationPreferenceFromJSON,
    NotificationPreferenceFromJSONTyped,
    NotificationPreferenceToJSON,
} from './NotificationPreference';

/**
 * An object representing for an invoice creation request.
 * @export
 * @interface CreateInvoiceRequest
 */
export interface CreateInvoiceRequest {
    /**
     * The external ID of the invoice.
     * @type {string}
     * @memberof CreateInvoiceRequest
     */
    externalId: string;
    /**
     * The invoice amount.
     * @type {number}
     * @memberof CreateInvoiceRequest
     */
    amount: number;
    /**
     * The email address of the payer.
     * @type {string}
     * @memberof CreateInvoiceRequest
     */
    payerEmail?: string;
    /**
     * A description of the payment.
     * @type {string}
     * @memberof CreateInvoiceRequest
     */
    description?: string;
    /**
     * The duration of the invoice.
     * @type {number}
     * @memberof CreateInvoiceRequest
     */
    invoiceDuration?: number;
    /**
     * The ID of the callback virtual account.
     * @type {string}
     * @memberof CreateInvoiceRequest
     */
    callbackVirtualAccountId?: string;
    /**
     * Indicates whether email notifications should be sent.
     * @type {boolean}
     * @memberof CreateInvoiceRequest
     */
    shouldSendEmail?: boolean;
    /**
     * 
     * @type {CustomerObject}
     * @memberof CreateInvoiceRequest
     */
    customer?: CustomerObject;
    /**
     * 
     * @type {NotificationPreference}
     * @memberof CreateInvoiceRequest
     */
    customerNotificationPreference?: NotificationPreference;
    /**
     * The URL to redirect to on successful payment.
     * @type {string}
     * @memberof CreateInvoiceRequest
     */
    successRedirectUrl?: string;
    /**
     * The URL to redirect to on payment failure.
     * @type {string}
     * @memberof CreateInvoiceRequest
     */
    failureRedirectUrl?: string;
    /**
     * An array of available payment methods.
     * @type {Array<string>}
     * @memberof CreateInvoiceRequest
     */
    paymentMethods?: Array<string>;
    /**
     * The middle label.
     * @type {string}
     * @memberof CreateInvoiceRequest
     */
    midLabel?: string;
    /**
     * Indicates whether credit card authentication is required.
     * @type {boolean}
     * @memberof CreateInvoiceRequest
     */
    shouldAuthenticateCreditCard?: boolean;
    /**
     * The currency of the invoice.
     * @type {string}
     * @memberof CreateInvoiceRequest
     */
    currency?: string;
    /**
     * The reminder time.
     * @type {number}
     * @memberof CreateInvoiceRequest
     */
    reminderTime?: number;
    /**
     * The local.
     * @type {string}
     * @memberof CreateInvoiceRequest
     */
    local?: string;
    /**
     * The unit of the reminder time.
     * @type {string}
     * @memberof CreateInvoiceRequest
     */
    reminderTimeUnit?: string;
    /**
     * An array of items included in the invoice.
     * @type {Array<InvoiceItem>}
     * @memberof CreateInvoiceRequest
     */
    items?: Array<InvoiceItem>;
    /**
     * An array of fees associated with the invoice.
     * @type {Array<InvoiceFee>}
     * @memberof CreateInvoiceRequest
     */
    fees?: Array<InvoiceFee>;
    /**
     * 
     * @type {ChannelProperties}
     * @memberof CreateInvoiceRequest
     */
    channelProperties?: ChannelProperties;
}

/**
 * Check if a given object implements the CreateInvoiceRequest interface.
 */
export function instanceOfCreateInvoiceRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "externalId" in value;
    isInstance = isInstance && "amount" in value;

    return isInstance;
}

export function CreateInvoiceRequestFromJSON(json: any): CreateInvoiceRequest {
    return CreateInvoiceRequestFromJSONTyped(json, false);
}

export function CreateInvoiceRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateInvoiceRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'externalId': json['external_id'],
        'amount': json['amount'],
        'payerEmail': !exists(json, 'payer_email') ? undefined : json['payer_email'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'invoiceDuration': !exists(json, 'invoice_duration') ? undefined : json['invoice_duration'],
        'callbackVirtualAccountId': !exists(json, 'callback_virtual_account_id') ? undefined : json['callback_virtual_account_id'],
        'shouldSendEmail': !exists(json, 'should_send_email') ? undefined : json['should_send_email'],
        'customer': !exists(json, 'customer') ? undefined : CustomerObjectFromJSON(json['customer']),
        'customerNotificationPreference': !exists(json, 'customer_notification_preference') ? undefined : NotificationPreferenceFromJSON(json['customer_notification_preference']),
        'successRedirectUrl': !exists(json, 'success_redirect_url') ? undefined : json['success_redirect_url'],
        'failureRedirectUrl': !exists(json, 'failure_redirect_url') ? undefined : json['failure_redirect_url'],
        'paymentMethods': !exists(json, 'payment_methods') ? undefined : json['payment_methods'],
        'midLabel': !exists(json, 'mid_label') ? undefined : json['mid_label'],
        'shouldAuthenticateCreditCard': !exists(json, 'should_authenticate_credit_card') ? undefined : json['should_authenticate_credit_card'],
        'currency': !exists(json, 'currency') ? undefined : json['currency'],
        'reminderTime': !exists(json, 'reminder_time') ? undefined : json['reminder_time'],
        'local': !exists(json, 'local') ? undefined : json['local'],
        'reminderTimeUnit': !exists(json, 'reminder_time_unit') ? undefined : json['reminder_time_unit'],
        'items': !exists(json, 'items') ? undefined : ((json['items'] as Array<any>).map(InvoiceItemFromJSON)),
        'fees': !exists(json, 'fees') ? undefined : ((json['fees'] as Array<any>).map(InvoiceFeeFromJSON)),
        'channelProperties': !exists(json, 'channel_properties') ? undefined : ChannelPropertiesFromJSON(json['channel_properties']),
    };
}

export function CreateInvoiceRequestToJSON(value?: CreateInvoiceRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'external_id': value.externalId,
        'amount': value.amount,
        'payer_email': value.payerEmail,
        'description': value.description,
        'invoice_duration': value.invoiceDuration,
        'callback_virtual_account_id': value.callbackVirtualAccountId,
        'should_send_email': value.shouldSendEmail,
        'customer': CustomerObjectToJSON(value.customer),
        'customer_notification_preference': NotificationPreferenceToJSON(value.customerNotificationPreference),
        'success_redirect_url': value.successRedirectUrl,
        'failure_redirect_url': value.failureRedirectUrl,
        'payment_methods': value.paymentMethods,
        'mid_label': value.midLabel,
        'should_authenticate_credit_card': value.shouldAuthenticateCreditCard,
        'currency': value.currency,
        'reminder_time': value.reminderTime,
        'local': value.local,
        'reminder_time_unit': value.reminderTimeUnit,
        'items': value.items === undefined ? undefined : ((value.items as Array<any>).map(InvoiceItemToJSON)),
        'fees': value.fees === undefined ? undefined : ((value.fees as Array<any>).map(InvoiceFeeToJSON)),
        'channel_properties': ChannelPropertiesToJSON(value.channelProperties),
    };
}

